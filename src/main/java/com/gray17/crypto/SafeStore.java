package com.gray17.crypto;

import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import java.io.FileInputStream;
import java.io.IOException;
import java.security.*;
import java.security.cert.CertificateException;

// Currently, the SafeStore and Authenticator class are separate proofs of concept.
// They are not connected in any way shape or form
public class SafeStore {
    private final KeyStore keyStore;
    private PublicKey key;
    private KeyPair pair;
    private Cipher cipher;

    // TODO: Implement a search method to make it platform and version independent!
    public static final String PATH_TO_CA_CERTS_WIN64_JRE = "C:/Program Files/Java/jre1.8.0_291/lib/security/cacerts";

    public SafeStore() throws KeyStoreException {
        keyStore = KeyStore.getInstance("JCEKS");
    }

    public void initKeyPair() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {
        //Creating a Signature object
        Signature sign = Signature.getInstance("SHA256withRSA");

        //Creating KeyPair generator object
        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA");

        //Initializing the key pair generator
        keyPairGen.initialize(2048);


        //Generate the pair of keys
        pair = keyPairGen.generateKeyPair();

        //Getting the public key from the key pair
        key = pair.getPublic();

        //Creating a Cipher object
        cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");

        //Initializing a Cipher object
        cipher.init(Cipher.ENCRYPT_MODE, key);
    }

    public void initSafeStore(String plaintextPassword) throws IOException, CertificateException, NoSuchAlgorithmException, KeyStoreException, UnrecoverableEntryException {
        char[] passwd = plaintextPassword.toCharArray();
        java.io.FileInputStream fis = new FileInputStream(SafeStore.PATH_TO_CA_CERTS_WIN64_JRE);
        keyStore.load(fis, passwd);

        //Creating the KeyStore.ProtectionParameter object
        KeyStore.ProtectionParameter protectionParam = new KeyStore.PasswordProtection(passwd);

        //Creating SecretKey object
        SecretKey mySecretKey = new SecretKeySpec("myPassword".getBytes(), "DSA");

        //Creating SecretKeyEntry object
        KeyStore.SecretKeyEntry secretKeyEntry = new KeyStore.SecretKeyEntry(mySecretKey);
        keyStore.setEntry("secretKeyAlias", secretKeyEntry, protectionParam);

        //Storing the KeyStore object
        java.io.FileOutputStream fos = new java.io.FileOutputStream("cirrus.keystore");
        keyStore.store(fos, passwd);
        System.out.println("\n\n========== CIRRUS KEYSTORE SUCCESSFULLY CREATED ==========");

        //Creating the KeyStore.SecretKeyEntry object
        KeyStore.SecretKeyEntry secretKeyEnt = (KeyStore.SecretKeyEntry)keyStore.getEntry("secretKeyAlias", protectionParam);

        //Creating SecretKey object
        SecretKey mysecretKey = secretKeyEnt.getSecretKey();
        System.out.println("Algorithm used to generate key : "+mysecretKey.getAlgorithm());
        System.out.println("Format used for the key: "+mysecretKey.getFormat());
        System.out.println("==========================================================\n");
    }

    /**
     *
     * @param encryptedString plaintext string to encrypt
     * @return the given string but encrypted using the generated key pair in this class constructor
     * @throws IllegalBlockSizeException block size not matching
     * @throws BadPaddingException wrong cipher padding
     */
    public String encrypt(String encryptedString) throws IllegalBlockSizeException, BadPaddingException {
        //Add data to the cipher
        byte[] input = encryptedString.getBytes();
        cipher.update(input);

        //encrypting the data
        byte[] cipherText = cipher.doFinal();
        return new String(cipherText);
    }

    /**
     *
     * @param encryptedString encrypted String object as input
     * @return the decrypted String given by input using the generated key pair generated by this class constructor.
     * @throws InvalidKeyException thrown when the key pair doesn't match with the cipher
     * @throws IllegalBlockSizeException thrown when the block is wrong - indicating invalid key early?
     * @throws BadPaddingException wrong cipher padding
     */
    public String decrypt(String encryptedString) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException {

        //Initializing the same cipher for decryption
        cipher.init(Cipher.DECRYPT_MODE, pair.getPrivate());

        //Decrypting the text
        byte[] decipheredText = cipher.doFinal(encryptedString.getBytes());

        //Return result
        return new String(decipheredText);
    }
}
